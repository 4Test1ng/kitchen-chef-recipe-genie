import React from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';
import { ShoppingCart, Check, Copy } from 'lucide-react';
import { toast } from '@/hooks/use-toast';

import { Recipe } from '@/types/recipe';

interface ShoppingListDialogProps {
  recipe: Recipe;
  scalingFactor?: number;
}

export const ShoppingListDialog: React.FC<ShoppingListDialogProps> = ({
  recipe,
  scalingFactor = 1
}) => {
  const generateShoppingList = () => {
    const baseIngredients = recipe.ingredients;
    const scaledText = scalingFactor !== 1 ? ` (scaled for ${Math.round(recipe.servings! * scalingFactor)} servings)` : '';
    
    const listText = `Shopping List for ${recipe.title}${scaledText}\n\n${baseIngredients.map(ingredient => `â€¢ ${ingredient}`).join('\n')}\n\nGenerated by KitchenChef`;
    
    return listText;
  };

  const copyToClipboard = () => {
    const listText = generateShoppingList();
    navigator.clipboard.writeText(listText).then(() => {
      toast({
        title: "Shopping list copied!",
        description: "The shopping list has been copied to your clipboard.",
      });
    });
  };

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="outline" size="sm" className="hover:bg-primary/10 hover:border-primary transition-colors">
          <ShoppingCart className="w-4 h-4 mr-2" />
          Shopping List
        </Button>
      </DialogTrigger>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <ShoppingCart className="w-5 h-5 text-primary" />
            Shopping List
          </DialogTitle>
        </DialogHeader>
        <div className="space-y-4">
          <div className="text-center p-3 bg-muted/30 rounded-lg">
            <h3 className="font-semibold">{recipe.title}</h3>
            {scalingFactor !== 1 && recipe.servings && (
              <Badge variant="secondary" className="mt-1">
                Scaled for {Math.round(recipe.servings * scalingFactor)} servings
              </Badge>
            )}
          </div>
          
          <Separator />
          
          <ScrollArea className="h-[300px]">
            <div className="space-y-2">
              {recipe.ingredients.map((ingredient, index) => (
                <div
                  key={index}
                  className="flex items-center gap-3 p-3 hover:bg-muted/20 rounded-lg transition-colors"
                >
                  <div className="w-4 h-4 border border-border rounded flex items-center justify-center">
                    <div className="w-2 h-2 rounded-full"></div>
                  </div>
                  <span className="text-sm">{ingredient}</span>
                </div>
              ))}
            </div>
          </ScrollArea>
          
          <div className="flex gap-2">
            <Button onClick={copyToClipboard} className="flex-1">
              <Copy className="w-4 h-4 mr-2" />
              Copy List
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};